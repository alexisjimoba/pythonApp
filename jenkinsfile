pipeline {
  agent any

  options {
    skipDefaultCheckout(true)
    timestamps()
  }

  environment {
    APP_NAME      = 'mi-servicio'
    TF_WORKDIR    = 'infra/terraform'   // ajusta si tu Terraform vive en otra carpeta
    TF_VAR_env    = 'dev'
    TF_VAR_region = 'us-central1'

    // SonarQube opcional (no usamos token)
    SONARQUBE_ENV = 'SonarQubeServer'
    SONAR_PROJECT = 'org:mi-servicio'
  }

  stages {

    stage('Checkout') {
      steps {
        ansiColor('xterm') {
          // Repo PÃšBLICO + limpieza de workspace y del .git previo
          checkout([$class: 'GitSCM',
            branches: [[name: '*/main']],
            userRemoteConfigs: [[
              url: 'https://github.com/alexisjimoba/pythonApp.git'
            ]],
            extensions: [
              [$class: 'WipeWorkspace'],
              [$class: 'CleanBeforeCheckout']
            ]
          ])
          sh '''#!/bin/bash
            set -euxo pipefail
            echo "== Entorno =="
            printenv | sort
          '''
        }
      }
    }

    stage('Setup Tooling') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail

            # Instalar tfsec (binario)
            curl -sSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
            tfsec --version

            # Python venv + checkov
            python3 -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip
            pip install checkov
            checkov --version
          '''
        }
      }
    }

    stage('Static Code Analysis: Terraform') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            mkdir -p reports

            # tfsec â†’ SARIF + JSON (no rompe el build)
            tfsec --soft-fail --format sarif --out reports/tfsec.sarif "${TF_WORKDIR}"
            tfsec --soft-fail --format json  --out reports/tfsec.json  "${TF_WORKDIR}"

            # checkov â†’ SARIF + JUnit (no rompe el build)
            source .venv/bin/activate
            checkov -d "${TF_WORKDIR}" --soft-fail --output sarif    > reports/checkov.sarif
            checkov -d "${TF_WORKDIR}" --soft-fail --output junitxml > reports/checkov.junit.xml
          '''
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/*', fingerprint: true
          junit testResults: 'reports/checkov.junit.xml', allowEmptyResults: true
          script {
            try {
              recordIssues enabledForFailure: true, tools: [sarif(pattern: 'reports/*.sarif')]
            } catch (err) {
              echo "recordIssues/SARIF no disponible (Â¿falta plugin Warnings NG?): ${err}"
            }
          }
        }
      }
    }

    stage('Optional: SonarQube') {
      when { expression { fileExists('sonar-project.properties') } }
      steps {
        ansiColor('xterm') {
          script {
            try {
              withSonarQubeEnv("${SONARQUBE_ENV}") {
                sh '''#!/bin/bash
                  set -euxo pipefail
                  if command -v sonar-scanner >/dev/null 2>&1; then
                    # Sin -Dsonar.login: Jenkins usa credenciales del server configurado
                    sonar-scanner -Dsonar.projectKey="${SONAR_PROJECT}"
                  else
                    echo "sonar-scanner no encontrado; omitiendo SonarQube"
                  fi
                '''
              }
            } catch (err) {
              echo "SonarQube no configurado o plugin ausente: ${err}"
            }
          }
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/*', fingerprint: true
        }
      }
    }
  }

  post {
    success { echo "âœ… AnÃ¡lisis estÃ¡tico completado." }
    always  { echo "ðŸ“¦ Reportes en el directorio 'reports/'." }
  }
}
