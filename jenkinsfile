pipeline {
  agent {
    docker {
      image 'python:3.11-slim'
      args '-u root'
    }
  }

  options {
    timestamps()
    skipDefaultCheckout(true)
  }

  parameters {
    choice(name: 'TF_ACTION', choices: ['plan', 'apply', 'none'], description: 'Acci√≥n de Terraform')
    choice(name: 'TF_ENV',    choices: ['staging', 'production', 'local'], description: 'Ambiente para tfvars')
  }

  environment {
    // Rutas y PATH local para binarios sin sudo
    LOCAL_BIN   = "${WORKSPACE}/.bin"
    PATH        = "${LOCAL_BIN}:${PATH}"

    // Terraform
    TF_WORKDIR  = 'terraform'
    TF_VERSION  = '1.6.6' // c√°mbialo si quieres otra versi√≥n

    // Variables de ejemplo
    TF_VAR_env    = 'dev'
    TF_VAR_region = 'us-central1'
  }

  stages {

    stage('Bootstrap container deps') {
      steps {
        sh '''#!/bin/bash
          set -euxo pipefail
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            git curl ca-certificates bash unzip
          rm -rf /var/lib/apt/lists/*
        '''
      }
    }

    stage('Checkout') {
      steps {
        // Si tu job NO es multibranch, reemplaza por:
        // git branch: 'main', url: 'https://github.com/<org>/<repo>.git'
        checkout scm
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            echo "== Entorno ==" && printenv | sort
            git --version || true
            python3 --version || true
          '''
        }
      }
    }

    stage('Setup Tooling (tfsec / checkov / terraform)') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            mkdir -p "${LOCAL_BIN}"

            # --- tfsec (amd64/arm64) ---
            ARCH=$(uname -m)
            if [ "$ARCH" = "x86_64" ] || [ "$ARCH" = "amd64" ]; then
              TSEC_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64"
              TERRAFORM_ARCH="amd64"
            else
              TSEC_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-arm64"
              TERRAFORM_ARCH="arm64"
            fi
            curl -fsSL "$TSEC_URL" -o "${LOCAL_BIN}/tfsec"
            chmod +x "${LOCAL_BIN}/tfsec"
            tfsec --version

            # --- Terraform (sin sudo) ---
            TF_ZIP="terraform_${TF_VERSION}_linux_${TERRAFORM_ARCH}.zip"
            curl -fsSL "https://releases.hashicorp.com/terraform/${TF_VERSION}/${TF_ZIP}" -o "$TF_ZIP"
            unzip -o "$TF_ZIP" -d "${LOCAL_BIN}"
            rm -f "$TF_ZIP"
            terraform -version

            # --- venv + checkov ---
            python3 -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip
            pip install checkov
            checkov --version
          '''
        }
      }
    }

    stage('Static Code Analysis: Terraform') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            mkdir -p reports

            # Autodetecci√≥n de carpeta con .tf
            TARGET="${TF_WORKDIR}"
            if [ ! -d "${TARGET}" ]; then
              if   [ -d "terraform" ];       then TARGET="terraform"
              elif [ -d "infra/terraform" ]; then TARGET="infra/terraform"
              else TARGET="."; fi
            fi

            if ! find "${TARGET}" -type f -name '*.tf' -print -quit | grep -q . ; then
              echo "‚è≠Ô∏è  No hay archivos Terraform en ${TARGET}. Saltando escaneo IaC."
              exit 0
            fi

            echo "üîé Escaneando Terraform en: ${TARGET}"
            tfsec   --soft-fail --format sarif --out reports/tfsec.sarif "${TARGET}"
            tfsec   --soft-fail --format json  --out reports/tfsec.json  "${TARGET}"
            source .venv/bin/activate
            checkov -d "${TARGET}" --soft-fail --output sarif    > reports/checkov.sarif
            checkov -d "${TARGET}" --soft-fail --output junitxml > reports/checkov.junit.xml
          '''
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/*', fingerprint: true
          junit testResults: 'reports/checkov.junit.xml', allowEmptyResults: true
          script {
            try {
              recordIssues enabledForFailure: true, tools: [sarif(pattern: 'reports/*.sarif')]
            } catch (err) {
              echo "recordIssues/SARIF no disponible (Warnings NG no instalado?): ${err}"
            }
          }
        }
      }
    }

    stage('Terraform Init/Plan/Apply') {
      when { expression { params.TF_ACTION != 'none' } }
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail

            # Selecci√≥n de carpeta
            TARGET="${TF_WORKDIR}"
            if [ ! -d "${TARGET}" ]; then
              if   [ -d "terraform" ];       then TARGET="terraform"
              elif [ -d "infra/terraform" ]; then TARGET="infra/terraform"
              else
                echo "‚ùå No se encontr√≥ directorio Terraform. Abortando stage."
                exit 1
              fi
            fi

            # tfvars del ambiente (si existe)
            TFVARS=""
            if [ -f "${TARGET}/environments/${TF_ENV}/terraform.tfvars" ]; then
              TFVARS="-var-file=environments/${TF_ENV}/terraform.tfvars"
            fi

            echo "üìÅ Directorio: ${TARGET}"
            echo "üå± Ambiente: ${TF_ENV}"
            echo "‚öôÔ∏è  Acci√≥n: ${TF_ACTION}"

            # Init / Validate
            terraform -chdir="${TARGET}" init -input=false -upgrade
            terraform -chdir="${TARGET}" validate

            # Si no hay credenciales AWS, avisa temprano (para evitar errores poco claros)
            if [ -z "${AWS_ACCESS_KEY_ID:-}" ] || [ -z "${AWS_SECRET_ACCESS_KEY:-}" ]; then
              echo "‚ö†Ô∏è  AWS creds no presentes en el entorno. Si el provider AWS requiere acceso, plan/apply fallar√°n."
            fi

            # Plan
            if [ "${TF_ACTION}" = "plan" ] || [ "${TF_ACTION}" = "apply" ]; then
              terraform -chdir="${TARGET}" plan -input=false ${TFVARS} -out=tfplan
            fi

            # Apply (protegido por TF_ACTION)
            if [ "${TF_ACTION}" = "apply" ]; then
              # Puedes pedir confirmaci√≥n manual con 'input' si quieres:
              # echo "Esperando confirmaci√≥n para aplicar..." ; sleep 10
              terraform -chdir="${TARGET}" apply -input=false -auto-approve tfplan
            fi
          '''
        }
      }
    }
  }

  post {
    success { echo "‚úÖ Pipeline OK (incluye Terraform ${params.TF_ACTION})." }
    always  { echo "üì¶ Reportes en 'reports/' (si hubo an√°lisis)." }
  }
}
