pipeline {
  agent any

  options {
    timestamps()
    skipDefaultCheckout(true)
  }

  parameters {
    choice(name: 'TF_ACTION', choices: ['plan', 'apply', 'none'], description: 'Acci√≥n de Terraform')
    choice(name: 'TF_ENV',    choices: ['staging', 'production', 'local'], description: 'Ambiente para tfvars')
  }

  environment {
    LOCAL_BIN   = "${WORKSPACE}/.bin"
    PATH        = "${LOCAL_BIN}:${PATH}"

    TF_WORKDIR  = 'terraform'
    TF_VERSION  = '1.6.6'

    TF_VAR_env    = 'dev'
    TF_VAR_region = 'us-central1'
  }

  stages {

    stage('Bootstrap deps (Linux)') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            # Instala herramientas base en el nodo/contendor Jenkins
            # (si no tienes permisos, instala previamente en la imagen del nodo)
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              git curl ca-certificates bash unzip python3 python3-venv python3-pip
            rm -rf /var/lib/apt/lists/*
          '''
        }
      }
    }

    stage('Checkout') {
      steps {
        // Si NO es multibranch, usa: git branch: 'main', url: 'https://github.com/alexisjimoba/pythonApp.git'
        checkout scm
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            echo "== Entorno ==" && printenv | sort
            git --version
            python3 --version
            pip3 --version
          '''
        }
      }
    }

    stage('Setup Tooling (tfsec / terraform / checkov)') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            mkdir -p "${LOCAL_BIN}"

            # tfsec (amd64/arm64) sin sudo
            ARCH=$(uname -m)
            if [ "$ARCH" = "x86_64" ] || [ "$ARCH" = "amd64" ]; then
              TSEC_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64"
              TERRAFORM_ARCH="amd64"
            else
              TSEC_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-arm64"
              TERRAFORM_ARCH="arm64"
            fi
            curl -fsSL "$TSEC_URL" -o "${LOCAL_BIN}/tfsec"
            chmod +x "${LOCAL_BIN}/tfsec"
            tfsec --version

            # Terraform CLI sin sudo
            TF_ZIP="terraform_${TF_VERSION}_linux_${TERRAFORM_ARCH}.zip"
            curl -fsSL "https://releases.hashicorp.com/terraform/${TF_VERSION}/${TF_ZIP}" -o "$TF_ZIP"
            unzip -o "$TF_ZIP" -d "${LOCAL_BIN}"
            rm -f "$TF_ZIP"
            terraform -version

            # checkov sin venv (para simplificar)
            pip3 install --no-cache-dir --upgrade pip
            pip3 install --no-cache-dir checkov
            checkov --version
          '''
        }
      }
    }

    stage('Static Code Analysis: Terraform') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            mkdir -p reports

            # Detecta carpeta con .tf
            TARGET="${TF_WORKDIR}"
            if [ ! -d "${TARGET}" ]; then
              if   [ -d "terraform" ];       then TARGET="terraform"
              elif [ -d "infra/terraform" ]; then TARGET="infra/terraform"
              else TARGET="."; fi
            fi

            if ! find "${TARGET}" -type f -name '*.tf' -print -quit | grep -q . ; then
              echo "‚è≠Ô∏è  No hay archivos Terraform en ${TARGET}. Saltando escaneo IaC."
              exit 0
            fi

            echo "üîé Escaneando Terraform en: ${TARGET}"
            tfsec   --soft-fail --format sarif --out reports/tfsec.sarif "${TARGET}"
            tfsec   --soft-fail --format json  --out reports/tfsec.json  "${TARGET}"
            checkov -d "${TARGET}" --soft-fail --output sarif    > reports/checkov.sarif
            checkov -d "${TARGET}" --soft-fail --output junitxml > reports/checkov.junit.xml
          '''
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/*', fingerprint: true
          junit testResults: 'reports/checkov.junit.xml', allowEmptyResults: true
          script {
            try {
              recordIssues enabledForFailure: true, tools: [sarif(pattern: 'reports/*.sarif')]
            } catch (err) {
              echo "recordIssues/SARIF no disponible (¬øWarnings NG no instalado?): ${err}"
            }
          }
        }
      }
    }

    stage('Terraform Init/Plan/Apply') {
      when { expression { params.TF_ACTION != 'none' } }
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail

            # Selecci√≥n de carpeta Terraform
            TARGET="${TF_WORKDIR}"
            if [ ! -d "${TARGET}" ]; then
              if   [ -d "terraform" ];       then TARGET="terraform"
              elif [ -d "infra/terraform" ]; then TARGET="infra/terraform"
              else
                echo "‚ùå No se encontr√≥ directorio Terraform. Abortando stage."
                exit 1
              fi
            fi

            # tfvars del ambiente si existe
            TFVARS=""
            if [ -f "${TARGET}/environments/${TF_ENV}/terraform.tfvars" ]; then
              TFVARS="-var-file=environments/${TF_ENV}/terraform.tfvars"
            fi

            echo "üìÅ Directorio: ${TARGET}"
            echo "üå± Ambiente: ${TF_ENV}"
            echo "‚öôÔ∏è  Acci√≥n: ${TF_ACTION}"

            terraform -chdir="${TARGET}" init -input=false -upgrade
            terraform -chdir="${TARGET}" validate

            # Aviso si no hay credenciales AWS
            if [ -z "${AWS_ACCESS_KEY_ID:-}" ] || [ -z "${AWS_SECRET_ACCESS_KEY:-}" ]; then
              echo "‚ö†Ô∏è  AWS creds no presentes: plan/apply podr√≠an fallar si el provider las requiere."
            fi

            if [ "${TF_ACTION}" = "plan" ] || [ "${TF_ACTION}" = "apply" ]; then
              terraform -chdir="${TARGET}" plan -input=false ${TFVARS} -out=tfplan
            fi

            if [ "${TF_ACTION}" = "apply" ] ; then
              terraform -chdir="${TARGET}" apply -input=false -auto-approve tfplan
            fi
          '''
        }
      }
    }
  }

  post {
    success { echo "‚úÖ Pipeline OK (Terraform: ${params.TF_ACTION})." }
    always  { echo "üì¶ Reportes en 'reports/' (si hubo an√°lisis)." }
  }
}
