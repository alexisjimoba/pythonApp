pipeline {
  agent any

  options {
    timestamps()
    skipDefaultCheckout(true)
  }

  parameters {
    choice(name: 'TF_ACTION', choices: ['plan', 'apply', 'none'], description: 'Acci√≥n de Terraform')
    choice(name: 'TF_ENV',    choices: ['staging', 'production', 'local'], description: 'Ambiente para tfvars')
  }

  environment {
    LOCAL_BIN     = "${WORKSPACE}/.bin"
    PATH          = "${LOCAL_BIN}:${PATH}"

    TF_WORKDIR    = 'terraform'
    TF_VERSION    = '1.6.6'

    TF_VAR_env    = 'dev'
    TF_VAR_region = 'us-central1'
  }

  stages {

    stage('Checkout') {
      steps {
        // Si NO es multibranch, usa:
        // git branch: 'main', url: 'https://github.com/alexisjimoba/pythonApp.git'
        checkout scm
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            echo "== Entorno ==" && printenv | sort
            which git || true
            git --version || true
            which curl || true
            which wget || true
            which jar || true
            which python3 || true
          '''
        }
      }
    }

    stage('Setup Tooling (sin apt)') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            mkdir -p "${LOCAL_BIN}"

            # --- helper descarga (curl o wget) ---
            dl() {
              URL="$1"
              OUT="$2"
              if command -v curl >/dev/null 2>&1; then
                curl -fsSL "$URL" -o "$OUT"
              elif command -v wget >/dev/null 2>&1; then
                wget -qO "$OUT" "$URL"
              else
                echo "‚ùå No hay curl ni wget. Imposible descargar $URL"
                return 1
              fi
            }

            # --- tfsec (amd64/arm64) ---
            ARCH=$(uname -m)
            if [ "$ARCH" = "x86_64" ] || [ "$ARCH" = "amd64" ]; then
              TSEC_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64"
              TERRAFORM_ARCH="amd64"
              CKV_URL="https://github.com/bridgecrewio/checkov/releases/latest/download/checkov_Linux_x86_64"
            else
              TSEC_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-arm64"
              TERRAFORM_ARCH="arm64"
              CKV_URL="https://github.com/bridgecrewio/checkov/releases/latest/download/checkov_Linux_arm64"
            fi

            dl "$TSEC_URL" "${LOCAL_BIN}/tfsec"
            chmod +x "${LOCAL_BIN}/tfsec"
            tfsec --version || { echo "‚ö†Ô∏è tfsec no ejecuta"; true; }

            # --- Terraform CLI (zip) usando 'jar' para extraer ---
            TF_ZIP="terraform_${TF_VERSION}_linux_${TERRAFORM_ARCH}.zip"
            dl "https://releases.hashicorp.com/terraform/${TF_VERSION}/${TF_ZIP}" "$TF_ZIP"
            if command -v jar >/dev/null 2>&1; then
              rm -f "${LOCAL_BIN}/terraform" || true
              # extrae en carpeta tmp y mueve binario
              rm -rf .tfzip && mkdir .tfzip
              (cd .tfzip && jar xf "../$TF_ZIP")
              mv .tfzip/terraform "${LOCAL_BIN}/terraform"
              rm -rf .tfzip "$TF_ZIP"
              chmod +x "${LOCAL_BIN}/terraform"
              terraform -version || { echo "‚ö†Ô∏è terraform no ejecuta"; true; }
            else
              echo "‚ùå 'jar' no est√° disponible. No se pudo extraer Terraform."
              rm -f "$TF_ZIP"
            fi

            # --- checkov: preferimos pip si hay python3; si no, binario ---
            if command -v python3 >/dev/null 2>&1; then
              python3 -m pip install --no-cache-dir --upgrade pip || true
              python3 -m pip install --no-cache-dir checkov || true
              checkov --version || echo "‚ö†Ô∏è checkov via pip no ejecuta"
            else
              echo "‚ÑπÔ∏è Sin python3; probando checkov binario"
              if dl "$CKV_URL" "${LOCAL_BIN}/checkov"; then
                chmod +x "${LOCAL_BIN}/checkov"
                checkov --version || echo "‚ö†Ô∏è checkov binario no ejecuta"
              else
                echo "‚ö†Ô∏è No se pudo instalar checkov (ni pip ni binario). Se omitir√°."
              fi
            fi
          '''
        }
      }
    }

    stage('Static Code Analysis: Terraform') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            mkdir -p reports

            # Detecta carpeta con .tf
            TARGET="${TF_WORKDIR}"
            if [ ! -d "${TARGET}" ]; then
              if   [ -d "terraform" ];       then TARGET="terraform"
              elif [ -d "infra/terraform" ]; then TARGET="infra/terraform"
              else TARGET="."; fi
            fi

            if ! find "${TARGET}" -type f -name '*.tf' -print -quit | grep -q . ; then
              echo "‚è≠Ô∏è  No hay archivos Terraform en ${TARGET}. Saltando escaneo IaC."
              exit 0
            fi

            echo "üîé Escaneando Terraform en: ${TARGET}"
            if command -v tfsec >/dev/null 2>&1; then
              tfsec --soft-fail --format sarif --out reports/tfsec.sarif "${TARGET}" || true
              tfsec --soft-fail --format json  --out reports/tfsec.json  "${TARGET}" || true
            else
              echo "‚ö†Ô∏è tfsec no disponible; omitiendo."
            fi

            if command -v checkov >/dev/null 2>&1; then
              checkov -d "${TARGET}" --soft-fail --output sarif    > reports/checkov.sarif || true
              checkov -d "${TARGET}" --soft-fail --output junitxml > reports/checkov.junit.xml || true
            else
              echo "‚ö†Ô∏è checkov no disponible; omitiendo."
            fi
          '''
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/*', fingerprint: true
          junit testResults: 'reports/checkov.junit.xml', allowEmptyResults: true
          script {
            try {
              recordIssues enabledForFailure: true, tools: [sarif(pattern: 'reports/*.sarif')]
            } catch (err) {
              echo "recordIssues/SARIF no disponible (¬øWarnings NG no instalado?): ${err}"
            }
          }
        }
      }
    }

    stage('Terraform Init/Plan/Apply') {
      when { expression { params.TF_ACTION != 'none' } }
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail

            if ! command -v terraform >/dev/null 2>&1; then
              echo "‚ùå Terraform CLI no disponible. Aborta stage."
              exit 1
            fi

            # Selecci√≥n de carpeta Terraform
            TARGET="${TF_WORKDIR}"
            if [ ! -d "${TARGET}" ]; then
              if   [ -d "terraform" ];       then TARGET="terraform"
              elif [ -d "infra/terraform" ]; then TARGET="infra/terraform"
              else
                echo "‚ùå No se encontr√≥ directorio Terraform. Abortando stage."
                exit 1
              fi
            fi

            # tfvars por ambiente si existe
            TFVARS=""
            if [ -f "${TARGET}/environments/${TF_ENV}/terraform.tfvars" ]; then
              TFVARS="-var-file=environments/${TF_ENV}/terraform.tfvars"
            fi

            echo "üìÅ Directorio: ${TARGET}"
            echo "üå± Ambiente: ${TF_ENV}"
            echo "‚öôÔ∏è  Acci√≥n: ${TF_ACTION}"

            terraform -chdir="${TARGET}" init -input=false -upgrade
            terraform -chdir="${TARGET}" validate

            # Aviso si no hay credenciales AWS
            if [ -z "${AWS_ACCESS_KEY_ID:-}" ] || [ -z "${AWS_SECRET_ACCESS_KEY:-}" ]; then
              echo "‚ö†Ô∏è  AWS creds no presentes: plan/apply podr√≠an fallar si el provider las requiere."
            fi

            if [ "${TF_ACTION}" = "plan" ] || [ "${TF_ACTION}" = "apply" ]; then
              terraform -chdir="${TARGET}" plan -input=false ${TFVARS} -out=tfplan
            fi

            if [ "${TF_ACTION}" = "apply" ]; then
              terraform -chdir="${TARGET}" apply -input=false -auto-approve tfplan
            fi
          '''
        }
      }
    }
  }

  post {
    success { echo "‚úÖ Pipeline OK (Terraform: ${params.TF_ACTION})." }
    always  { echo "üì¶ Reportes en 'reports/' (si hubo an√°lisis)." }
  }
}
