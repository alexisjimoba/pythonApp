pipeline {
  agent any

  parameters {
    choice(name: 'TF_ACTION', choices: ['apply', 'destroy'], description: 'Acci√≥n a ejecutar con Terraform')
  }

  environment {
    IMAGE_NAME = "pythonapp"
    IMAGE_TAG  = "latest"

    TF_WORKDIR = "terraform"
    TF_VERSION = "1.6.6"

    KUBECONFIG_PATH = "${WORKSPACE}/.kube/config"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build Docker Image') {
      when { expression { params.TF_ACTION == 'apply' } }
      steps {
        sh '''
          echo "üî® Construyendo imagen Docker..."
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} application
        '''
      }
    }

    stage('Load Image into Minikube') {
      when { expression { params.TF_ACTION == 'apply' } }
      steps {
        sh '''
          echo "üì¶ Cargando imagen en Minikube..."
          minikube image load ${IMAGE_NAME}:${IMAGE_TAG}
        '''
      }
    }

    stage('Prepare Kubeconfig') {
      steps {
        sh '''
          echo "‚öôÔ∏è Preparando kubeconfig para Terraform..."

          mkdir -p $(dirname ${KUBECONFIG_PATH})
          cp ~/.kube/config ${KUBECONFIG_PATH}

          # Forzar server a host.docker.internal
          API_URL="https://host.docker.internal:$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}' | sed 's#https://127.0.0.1:##')"
          sed -E 's#^([[:space:]]*server:[[:space:]]*).*$#\\1'"${API_URL}"'#' -i "${KUBECONFIG_PATH}"

          # Desactivar validaci√≥n TLS
          sed -E -i '/^[[:space:]]*certificate-authority(-data)?:/d' "${KUBECONFIG_PATH}"
          grep -q '^[[:space:]]*insecure-skip-tls-verify:' "${KUBECONFIG_PATH}" || \
            sed -E -i '/^[[:space:]]*server:[[:space:]]*https?:\\/\\//a\\  insecure-skip-tls-verify: true' "${KUBECONFIG_PATH}"

          export KUBECONFIG=${KUBECONFIG_PATH}
          kubectl get nodes
        '''
      }
    }

    stage('Terraform Init/Action') {
      steps {
        dir("${TF_WORKDIR}") {
          script {
            if (params.TF_ACTION == 'apply') {
              sh '''
                echo "üå± Terraform init..."
                terraform init -upgrade
                terraform validate
                terraform plan -out=tfplan
                terraform apply -auto-approve tfplan
              '''
            } else if (params.TF_ACTION == 'destroy') {
              sh '''
                echo "üî• Ejecutando Terraform destroy..."
                terraform init -upgrade
                terraform destroy -auto-approve
              '''
            }
          }
        }
      }
    }
  }

  post {
    success { echo "‚úÖ Pipeline completado (acci√≥n: ${params.TF_ACTION})." }
    failure { echo "‚ùå Fallo en el pipeline (acci√≥n: ${params.TF_ACTION})." }
  }
}
