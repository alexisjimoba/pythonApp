pipeline {
  agent {
    docker {
      image 'python:3.11-slim'
      args '-u root'
    }
  }

  options {
    skipDefaultCheckout(true)
    timestamps()
  }

  environment {
    APP_NAME    = 'mi-servicio'
    TF_WORKDIR  = 'terraform'      // ← Opción 1: ruta correcta
    TF_VAR_env  = 'dev'
    TF_VAR_region = 'us-central1'

    LOCAL_BIN = "${WORKSPACE}/.bin"
    PATH      = "${LOCAL_BIN}:${PATH}"
  }

  stages {

    stage('Bootstrap container deps') {
      steps {
        sh '''#!/bin/bash
          set -euxo pipefail
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            git curl ca-certificates bash
          rm -rf /var/lib/apt/lists/*
        '''
      }
    }

    stage('Checkout') {
      steps {
        ansiColor('xterm') {
          // Repo PUBLICO sin credenciales
          checkout([$class: 'GitSCM',
            branches: [[name: '*/main']],
            userRemoteConfigs: [[ url: 'https://github.com/alexisjimoba/pythonApp.git' ]],
            extensions: [
              [$class: 'WipeWorkspace'],
              [$class: 'CleanBeforeCheckout']
            ]
          ])
          sh '''#!/bin/bash
            set -euxo pipefail
            echo "== Entorno ==" && printenv | sort
            git --version
            python3 --version
            pip --version
          '''
        }
      }
    }

    stage('Setup Tooling') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            mkdir -p "${LOCAL_BIN}"

            # tfsec (amd64/arm64) sin sudo en ${LOCAL_BIN}
            ARCH=$(uname -m)
            if [ "$ARCH" = "x86_64" ] || [ "$ARCH" = "amd64" ]; then
              TSEC_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64"
            else
              TSEC_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-arm64"
            fi
            curl -fsSL "$TSEC_URL" -o "${LOCAL_BIN}/tfsec"
            chmod +x "${LOCAL_BIN}/tfsec"
            tfsec --version

            # venv + checkov
            python3 -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip
            pip install checkov
            checkov --version
          '''
        }
      }
    }

    stage('Static Code Analysis: Terraform') {
      steps {
        ansiColor('xterm') {
          sh '''#!/bin/bash
            set -euxo pipefail
            mkdir -p reports

            # --- Autodetección robusta de carpeta Terraform ---
            TARGET="${TF_WORKDIR}"
            if [ ! -d "${TARGET}" ]; then
              if [ -d "terraform" ]; then TARGET="terraform"
              elif [ -d "infra/terraform" ]; then TARGET="infra/terraform"
              else TARGET="."; fi
            fi

            # ¿Hay archivos *.tf en la ruta elegida?
            if ! find "${TARGET}" -type f -name '*.tf' -print -quit | grep -q . ; then
              echo "⏭️  No hay archivos Terraform en ${TARGET}. Saltando análisis IaC."
              exit 0
            fi

            echo "🔎 Escaneando Terraform en: ${TARGET}"
            tfsec --soft-fail --format sarif --out reports/tfsec.sarif "${TARGET}"
            tfsec --soft-fail --format json  --out reports/tfsec.json  "${TARGET}"

            source .venv/bin/activate
            checkov -d "${TARGET}" --soft-fail --output sarif    > reports/checkov.sarif
            checkov -d "${TARGET}" --soft-fail --output junitxml > reports/checkov.junit.xml
          '''
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/*', fingerprint: true
          junit testResults: 'reports/checkov.junit.xml', allowEmptyResults: true
          script {
            try {
              recordIssues enabledForFailure: true, tools: [sarif(pattern: 'reports/*.sarif')]
            } catch (err) {
              echo "recordIssues/SARIF no disponible (¿Warnings NG no instalado?): ${err}"
            }
          }
        }
      }
    }
  }

  post {
    success { echo "✅ Pipeline OK (IaC escaneado si había Terraform)." }
    always  { echo "📦 Reportes en 'reports/' (si hubo análisis)." }
  }
}
