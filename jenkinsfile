pipeline {
  agent any

  options {
    skipDefaultCheckout(true)
    wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) // <- reemplaza ansiColor('xterm')
    timestamps()
  }

  environment {
    // Workspace/env
    APP_NAME      = 'mi-servicio'
    TF_WORKDIR    = 'infra/terraform' // ajusta si tu Terraform vive en otra carpeta

    // Si configuraste NodeJS como tool (opcional para ESLint)
    NODEJS_HOME   = tool name: 'node20', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
    PATH          = "${NODEJS_HOME}/bin:${PATH}"

    // Ejemplo de variables para Terraform
    TF_VAR_env    = 'dev'
    TF_VAR_region = 'us-central1'

    // SonarQube (opcional)
    SONARQUBE_ENV = 'SonarQubeServer' // nombre del server en "Configure System"
    SONAR_PROJECT = 'org:mi-servicio'
    SONAR_TOKEN   = credentials('sonar-token')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/tu-org/tu-repo.git', credentialsId: 'git-cred']],
          extensions: [[$class: 'SubmoduleOption', recursiveSubmodules: true]]
        ])
        sh 'echo "== Entorno ==" && printenv | sort'
      }
    }

    stage('Setup Tooling') {
      steps {
        sh '''
          set -euxo pipefail

          # tfsec (binario)
          curl -sSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec --version

          # Python venv + checkov
          python3 -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install checkov
          checkov --version

          # Opcional: Node/ESLint si hay app JS/TS
          if [ -f package.json ]; then
            npm ci || npm i
            npx eslint -v || npm i -D eslint
          fi
        '''
      }
    }

    stage('Static Code Analysis: Terraform') {
      steps {
        sh '''
          set -euxo pipefail
          mkdir -p reports

          # tfsec â†’ SARIF + JSON
          tfsec --soft-fail --format sarif --out reports/tfsec.sarif ${TF_WORKDIR}
          tfsec --soft-fail --format json  --out reports/tfsec.json  ${TF_WORKDIR}

          # checkov â†’ SARIF + JUnit
          . .venv/bin/activate
          checkov -d ${TF_WORKDIR} --soft-fail --output sarif    > reports/checkov.sarif
          checkov -d ${TF_WORKDIR} --soft-fail --output junitxml > reports/checkov.junit.xml
        '''
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/*', fingerprint: true
          junit testResults: 'reports/checkov.junit.xml', allowEmptyResults: true
          // Requiere "Warnings Next Generation" (recordIssues + sarif)
          script {
            try {
              recordIssues enabledForFailure: true, tools: [sarif(pattern: 'reports/*.sarif')]
            } catch (err) {
              echo "recordIssues no disponible (plugin faltante?): ${err}"
            }
          }
        }
      }
    }

    stage('Optional: App Scan (ESLint/Sonar)') {
      when {
        anyOf {
          expression { fileExists('package.json') }
          expression { fileExists('sonar-project.properties') }
        }
      }
      steps {
        sh '''
          set -euxo pipefail
          mkdir -p reports

          # ESLint â†’ JUnit (no falla el build)
          if [ -f package.json ]; then
            npx eslint . -f junit -o reports/eslint.junit.xml || true
          fi
        '''
        // SonarQube (requiere plugin SonarQube y sonar-scanner en el agente)
        script {
          try {
            withSonarQubeEnv("${SONARQUBE_ENV}") {
              sh '''
                if [ -f sonar-project.properties ]; then
                  if command -v sonar-scanner >/dev/null 2>&1; then
                    sonar-scanner \
                      -Dsonar.projectKey="${SONAR_PROJECT}" \
                      -Dsonar.login="${SONAR_TOKEN}"
                  else
                    echo "sonar-scanner no encontrado; omitiendo SonarQube"
                  fi
                fi
              '''
            }
          } catch (err) {
            echo "withSonarQubeEnv no disponible (plugin SonarQube?): ${err}"
          }
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'reports/*', fingerprint: true
          junit testResults: 'reports/eslint.junit.xml', allowEmptyResults: true
        }
      }
    }
  }

  post {
    success { echo "âœ… AnÃ¡lisis estÃ¡tico completado." }
    always  { echo "ðŸ“¦ Reportes en el directorio 'reports/'." }
  }
}
